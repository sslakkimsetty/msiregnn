# See https://setuptools.readthedocs.io/en/latest/build_meta.html
[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta:__legacy__"

[tool.cruft]
skip = [
    "**/__init__.py",
    "tests/*"
]

# MyPy, see https://mypy.readthedocs.io/en/stable/config_file.html
[tool.mypy]
plugins = [
    "pydantic.mypy",
]

# Doc8, see https://doc8.readthedocs.io/en/stable/readme.html#ini-file-usage
[tool.doc8]
max-line-length = 120

# Coverage, see https://coverage.readthedocs.io/en/latest/config.html
[tool.coverage.run]
branch = true
source = ["msiregnn"]
omit = [
    "tests/*",
    "docs/*",
]

[tool.coverage.paths]
source = [
    "src/msiregnn",
    ".tox/*/lib/python*/site-packages/msiregnn",
]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "if __name__ == \"__main__\":",
    "if TYPE_CHECKING:",
    "def __str__",
    "def __repr__",
]

[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311"]

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
include_trailing_comma = true
reverse_relative = true

[tool.ruff]
line-length = 100
extend-include = ["*.ipynb"]

[tool.ruff.lint]
# See https://docs.astral.sh/ruff/rules
extend-select = [
    "F", # pyflakes
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "C90", # mccabe
    "I", # isort
    "UP", # pyupgrade
    "D", # pydocstyle
    "B", # bugbear
    "S", # bandit
    "T20", # print
    "N", # pep8 naming
    "ERA", # eradicate commented out code
    "NPY", # numpy checks
    "RUF", # ruff rules
]
ignore = [
    "D105", # Missing docstring in magic method
    "S404",
    "S603",
    "E203", # Black conflicts with the following
]

# See https://docs.astral.sh/ruff/settings/#per-file-ignores
[tool.ruff.lint.per-file-ignores]
# Ignore commented out code in Sphinx configuration file
"docs/source/conf.py" = ["ERA001"]

[tool.ruff.lint.pydocstyle]
convention = "pep257" 

[tool.pytest.ini_options]
# Test discovery
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Test output
addopts = [
    "--verbose",
    "--strict-markers",
    "--tb=short",
    "--cov=msiregnn",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-branch",
    "--cov-fail-under=80",
    "--durations=10",
    "--maxfail=1",
]

# Markers for organizing tests
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
]

# Pytest plugins
required_plugins = ["pytest-cov", "pytest-timeout"]

# Test timeout (in seconds)
timeout = 300

# Logging
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Coverage settings specific to pytest
[tool.pytest.coverage.run]
source = ["src/msiregnn"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/version.py",
]

[tool.pytest.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
]